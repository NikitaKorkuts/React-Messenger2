{"version":3,"file":"static/js/946.10401f40.chunk.js","mappings":"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","sources":["webpack://messanger/./src/components/shared/Field/field.module.scss?2f8a","components/shared/Field/Field.tsx","components/ui/Input/Input.tsx","webpack://messanger/./src/components/shared/Modal/modal.module.scss?0368","components/shared/Modal/Modal.tsx","webpack://messanger/./src/components/screens/Login/login.module.scss?52cd","components/screens/Login/Login.tsx","components/screens/Login/LoginContainer.tsx","pages/Login/LoginPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"field_formControl__3DwbJ\",\"error\":\"field_error__L23Yy\"};","import React, {FC} from 'react';\n\nimport s from './field.module.scss';\nimport {FieldPropsType} from './field.types';\n\nexport const Field: FC<FieldPropsType> = ({\n    children,\n    hasError = false,\n    error = '',\n}) => {\n    return (\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\n            <>\n                {children}\n                {hasError && <span>{error}</span>}\n            </>\n        </div>\n    );\n};\n\n","import React, {FC} from 'react';\n\nimport {Field} from '../../shared/Field/Field';\n\nimport {ExtraPropsType, InputPropsType} from './input.types';\n\nexport const Input: FC<InputPropsType> = ({\n    type = 'text',\n    name,\n    checked,\n    hasError= false,\n    error= '',\n    props = {},\n}) => {\n    const extraProps: ExtraPropsType = {};\n    if (type === 'checkbox' && checked === true) {\n        extraProps.checked = true;\n    }\n    return (\n        <Field\n            error={error}\n            hasError={hasError}\n        >\n            <input\n                type={type}\n                name={name}\n                {...props}\n                {...extraProps}\n            />\n        </Field>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"modalBackground\":\"modal_modalBackground__8+wzS\",\"active\":\"modal_active__b+5wc\",\"modal\":\"modal_modal__Fg02C\"};","import React, {FC} from 'react';\n\nimport s from './modal.module.scss';\nimport {ModalPropsType} from './modal.types';\n\nexport const Modal: FC<ModalPropsType> = ({ active, setActive, children}) => {\n    return (\n        <div className={`${s.modalBackground} ${active && s.active}`} onClick={() => setActive(false)}>\n            <div className={`${s.modal} ${active && s.active}`} onClick={e => e.stopPropagation()}>\n                {children}\n            </div>\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"login_modalContent__bX+I2\",\"formLogin\":\"login_formLogin__lofWz\",\"formLogInWithEmail\":\"login_formLogInWithEmail__-Adia\",\"formRow\":\"login_formRow__r99JZ\",\"showModalBtn\":\"login_showModalBtn__5iVdl\",\"showModalIcon\":\"login_showModalIcon__kO0XU\",\"formTitleRow\":\"login_formTitleRow__EdVOy\",\"formCheckbox\":\"login_formCheckbox__sn-1c\",\"formCheckboxField\":\"login_formCheckboxField__FuoxF\",\"formErrorText\":\"login_formErrorText__D7k+z\",\"formWhiteBackground\":\"login_formWhiteBackground__g2qLF\",\"formEmail\":\"login_formEmail__MgePm\",\"formPassword\":\"login_formPassword__hor0E\",\"formForgottenPassword\":\"login_formForgottenPassword__Tqc1t\",\"formCreateAnAccount\":\"login_formCreateAnAccount__qrUYL\"};","import React, {Component} from 'react';\nimport {Navigate} from 'react-router-dom';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\n\nimport {Input} from '../../ui/Input/Input';\nimport {Modal} from '../../shared/Modal/Modal';\n\nimport {LoginFormType, LoginPropsType, SubmitPropsType} from './login.types';\nimport s from './login.module.scss';\n\nexport class Login extends Component<LoginPropsType> {\n    state = {\n        isModalActive: true,\n    };\n\n    setIsModalActive = (active: boolean) => {\n        this.setState({isModalActive: active});\n    };\n\n    submit = (values: LoginFormType, {setSubmitting, setStatus}: SubmitPropsType) => {\n        const {login} = this.props;\n\n        const loginFormData = {\n            email: values.email,\n            password: values.password,\n            rememberMe: values.rememberMe,\n            captcha: values.verifyCode,\n        };\n        login(loginFormData, setStatus);\n        setSubmitting(false);\n    };\n\n    validationSchema = yup.object().shape({\n        email: yup\n            .string()\n            .email('Введен некорректный email адресс')\n            .max(50, 'Вы ввели слишком длинный email адресс')\n            .required('Введите email адресс'),\n        password: yup\n            .string()\n            .max(50, 'Вы ввели слишком длинный пароль')\n            .required('Введите пароль'),\n        verifyCode: yup\n            .string()\n            .max(15, 'Вы ввели слишком длинный код подтверждения'),\n    });\n\n    render () {\n        const {isAuth, captchaUrl} = this.props;\n\n        if (isAuth) {\n            return (\n                <Navigate to={'/profile'}/>\n            );\n        }\n        return (\n            <>\n                <Modal active={this.state.isModalActive} setActive={this.setIsModalActive.bind(this)}>\n                    <pre className={s.modalContent}>\n                        {`\nДля авторизации можно использвать аккаунты ниже.\n\nДля проверки чата нужно открыть первый аккаунт в обычном\nбраузере, а второй в режиме инкогнита или используя второй браузер/аккаунт google. \n\nАккаунт 1:\nemail: leedon.tube@mail.ru\nпароль: N19178XDek!\n\nАккаунт 2:\nemail: nikitakorkuts@mail.ru\nпароль: N19178XDek!\n                    `}\n                    </pre>\n                </Modal>\n                <Formik\n                    initialValues={{\n                        email: '',\n                        password: '',\n                        rememberMe: false,\n                        verifyCode: '',\n                    }}\n                    validateOnBlur\n                    onSubmit={this.submit}\n                    validationSchema={this.validationSchema}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        isValid,\n                        handleSubmit,\n                        dirty,\n                        isSubmitting,\n                        status,\n                    }) => (\n                        <form className={s.formLogin} onSubmit={handleSubmit}>\n\n                            <div className={s.formLogInWithEmail}>\n\n                                <div className={s.formTitleRow}>\n                                    <h1>Войти</h1>\n                                </div>\n\n                                <div className={s.formRow}>\n                                    <p\n                                        className={s.showModalBtn}\n                                        onClick={() => this.setIsModalActive(true)}\n                                    >\n                                        Показать доступные аккаунты\n                                        <span className={s.showModalIcon}>\n                                            &#10095;\n                                        </span>\n                                    </p>\n                                    <label>\n                                        <p>Email</p>\n                                        <Input\n                                            name={'email'}\n                                            hasError={touched.email && errors.email}\n                                            error={errors.email}\n                                            props={{\n                                                onChange: handleChange,\n                                                onBlur: handleBlur,\n                                                value: values.email,\n                                            }}\n                                        />\n                                    </label>\n                                </div>\n\n                                <div className={s.formRow}>\n                                    <label>\n                                        <p>Пароль</p>\n                                        <Input\n                                            name={'password'}\n                                            hasError={touched.password && errors.password}\n                                            error={errors.password}\n                                            props={{\n                                                onChange: handleChange,\n                                                onBlur: handleBlur,\n                                                value: values.password,\n                                            }}\n                                        />\n                                    </label>\n                                </div>\n\n                                <div className={s.formRow}>\n                                    <label className={s.formCheckbox}>\n                                        <div className={s.formCheckboxField}>\n                                            <Input\n                                                type={'checkbox'}\n                                                name={'rememberMe'}\n                                                props={{\n                                                    onChange: handleChange,\n                                                    onBlur: handleBlur,\n                                                    value: values.rememberMe,\n                                                }}\n                                            />\n                                        </div>\n\n                                        <span>Запомнить меня</span>\n                                    </label>\n                                </div>\n                                {captchaUrl && <>\n                                    <img alt=\"captcha\" className={s.captchaImg} src={captchaUrl}/>\n                                    <div className={s.formRow}>\n                                        <label>\n                                            <p>Текст выше</p>\n                                            <Input\n                                                name={'verifyCode'}\n                                                hasError={touched.verifyCode && errors.verifyCode}\n                                                error={errors.verifyCode}\n                                                props={{\n                                                    onChange: handleChange,\n                                                    onBlur: handleBlur,\n                                                    value: values.verifyCode,\n                                                }}\n                                            />\n                                        </label>\n                                    </div>\n                                </>}\n                                <div className={s.formRow}>\n                                    <label>\n                                        {status?.error && <span className={s.formErrorText}>{status.error}</span>}\n                                    </label>\n                                </div>\n\n                                <div className={s.formRow}>\n\n                                    <button\n                                        type=\"submit\"\n                                        disabled={!isValid && !dirty && isSubmitting}\n                                    >\n                                        Войти\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    )}\n                </Formik>\n            </>\n        );\n    }\n}","import {connect} from 'react-redux';\n\nimport {AppStateType} from '../../../store/store.types';\nimport {login} from '../../../store/auth/auth.actions';\n\nimport {Login} from './Login';\n\nconst mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl,\n});\n\nexport default connect(mapStateToProps, {login})(Login);\n","import React from 'react';\n\nimport LoginContainer from '../../components/screens/Login/LoginContainer';\n\nconst LoginPage = () => {\n    return (\n        <div>\n            <LoginContainer />\n        </div>\n    );\n};\n\nexport default LoginPage;"],"names":["Field","children","hasError","error","className","s","Input","type","name","checked","props","extraProps","Modal","active","setActive","onClick","e","stopPropagation","Login","state","isModalActive","setIsModalActive","setState","submit","values","setSubmitting","setStatus","login","email","password","rememberMe","captcha","verifyCode","validationSchema","yup","shape","max","required","this","isAuth","captchaUrl","to","bind","initialValues","validateOnBlur","onSubmit","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","isSubmitting","status","I","onChange","onBlur","value","alt","src","disabled","Component","connect","auth","LoginContainer"],"sourceRoot":""}